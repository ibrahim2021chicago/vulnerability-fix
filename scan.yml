---
- hosts: all

  vars_prompt:
    - name: package_name
      prompt: Enter the Package name
      private: no
  
  vars:
    ansible_python_interpreter: auto_legacy_silent
    filename: "./report_{{ package_name }}.csv"

  tasks:

    - name: "Extract package name"
      shell:
        cmd: "echo '{{ package_name }}' |
              grep -o '^[^[:digit:]]*' |
              sed 's/.$//'"
      run_once: true
      register: pkg_name

    - name: "Extract given package version"
      shell:
        cmd: "yum info '{{ package_name }}' |
             grep -wE 'Version|Release' |
             awk -F ': ' '{print $2}' |
             paste -sd '-'"
        warn: false
      register: package_version

    - name: "Check if package is installed or not"
      shell: 
        cmd: rpm -q "{{ pkg_name.stdout }}"
        warn: false
      register: package_check
      changed_when: false 
      failed_when: false

    - name: "Extract installed package version"
      shell:
        cmd: "rpm -q '{{ package_check.stdout }}' --qf '%{VERSION}-%{RELEASE}'"
        warn: false
      register: pkg_version
      when: '"not installed" not in package_check.stdout'

    - name: "Print execution results when same package version installed"
      debug:
        msg: "Same package version is installed"
      when:
        - "'not installed' not in package_check.stdout"
        - "package_version.stdout == pkg_version.stdout"
    
    - name: "Print execution results when package not installed"
      debug:
        msg: "Package is not installed"
      when:
        - "'not installed' in package_check.stdout"
    
    - name: "Print execution results when different package version installed"
      debug:
        msg: "Package {{ package_check.stdout }} version is installed"
      when:
        - "'not installed' not in package_check.stdout"
        - "package_version.stdout != pkg_version.stdout"

    - name: "Set header"
      shell: echo 'Hostname,IP_Address,Distribution,Package_name,Package_installed' > "{{ filename }}"
      run_once: true
      delegate_to: localhost
    
    - name: "Write data to file same package version installed"
      shell: echo {{ ansible_hostname }},{{ ansible_default_ipv4.address }},{{ ansible_distribution }} {{ ansible_distribution_version }},{{ package_name }},'Version matched' >> "{{ filename }}"
      delegate_to: localhost
      when:
        - "'not installed' not in package_check.stdout"
        - "package_version.stdout == pkg_version.stdout"

    - name: "Write data to file when package not installed"
      shell: echo {{ ansible_hostname }},{{ ansible_default_ipv4.address }},{{ ansible_distribution }} {{ ansible_distribution_version }},{{ package_name }},'Not Installed' >> "{{ filename }}"
      delegate_to: localhost
      when: "'not installed' in package_check.stdout"
  
    - name: "Write data to file when different package version installed"
      shell: echo {{ ansible_hostname }},{{ ansible_default_ipv4.address }},{{ ansible_distribution }} {{ ansible_distribution_version }},{{ package_name }},{{ package_check.stdout }} >> "{{ filename }}"
      delegate_to: localhost
      when:
        - "'not installed' not in package_check.stdout"
        - "package_version.stdout != pkg_version.stdout"