---

- hosts: all

  vars:
    ansible_python_interpreter: auto_legacy_silent

  vars_files:
    - package_list.yml

  tasks:
  
  - name: "Get package name"
    shell:
      cmd: "yum info '{{ item }}' |
            grep -i name |
            awk -F ': ' '{print $2}'"
      warn: false
    with_items: "{{ package_list }}"
    register: package_name
  
  - name: "Get package version"
    shell:
      cmd: "yum info '{{ item }}' |
            grep -i version |
            awk -F ': ' '{print $2}'"
      warn: false
    with_items: "{{ package_list }}"
    register: package_version
  
  - name: "Get package release"
    shell:
      cmd: "yum info '{{ item }}' |
            grep -i release |
            awk -F ': ' '{print $2}'"
      warn: false
    with_items: "{{ package_list }}"
    register: package_release

  - debug:
      msg: "{{ item }}"
    with_items: "{{ package_name.results | map(attribute='stdout') }}"

  - debug:
      msg: "{{ item }}"
    with_items: "{{ package_version.results | map(attribute='stdout') }}"

  - debug:
      msg: "{{ item }}"
    with_items: "{{ package_release.results | map(attribute='stdout') }}"
  
  - name: Gather the package facts
    package_facts:
      manager: auto

  - set_fact:
      pkg_ver: "{{ ansible_facts.packages[item] |
                map(attribute='version') |
                list }}"
    loop: "{{ package_name.results | map(attribute='stdout') }}"
  
  - debug:
      msg: "{{ pkg_ver }}"


  # - name: Get package facts
  #   package_facts:
  
  # - name: Dump packages as dict2items for query practice
  #   delegate_to: localhost
  #   copy:
  #     content: "{{ packages | dict2items | to_nice_json }}"
  #     dest: /tmp/packages_dict2items_{{ inventory_hostname }}.json
  
  # - name: Print reformatted package list for host
  #   debug:
  #     var: packages | dict2items | json_query(query)
  #   vars:
  #     query: '[*].value[*][].{name: name, version: version, release: release}'
