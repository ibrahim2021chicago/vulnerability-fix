---
- hosts: all

  vars_prompt:
    - name: package_name
      prompt: Enter the Package name
      private: no
  
  vars:
    ansible_python_interpreter: auto_legacy_silent
    filename: "./report_{{ package_name }}.csv"

  tasks:

    - name: "Extract package name"
      shell:
        cmd: "echo '{{ package_name }}' |
              rev |
              cut -d'-' -f3- |
              rev"
        warn: false
      run_once: true
      register: pkg_name

    - name: "Convert given package into numeric string"
      shell:
        cmd: "echo '{{ package_name }}' |
              tr -d -c 0-9"
        warn: false
      run_once: true
      register: package_version

    - name: "Check if package is installed or not"
      shell: 
        cmd: rpm -q "{{ pkg_name.stdout }}"
        warn: false
      register: package_check
      changed_when: false 
      failed_when: false

    - name: "Convert installed package into numeric string"
      shell:
        cmd: "echo '{{ package_check.stdout }}' |
              tr -d -c 0-9"
        warn: false
      register: pkg_version
      when: "'not installed' not in package_check.stdout"

    - debug:
        msg: "Same package version is installed, Nothing to do!"
      when:
        - "'not installed' not in package_check.stdout"
        - package_version.stdout|int == pkg_version.stdout|int

    - debug:
        msg: "Package not installed"
      when: "'not installed' in package_check.stdout"
    
    - debug:
        msg:
          - "Lower package version is installed"
          - "{{ package_check.stdout }}"
      when:
        - "'not installed' not in package_check.stdout"
        - package_version.stdout|int > pkg_version.stdout|int
  
    - debug:
        msg:
          - "Higher package version is installed"
          - "{{ package_check.stdout }}"
      when:
        - "'not installed' not in package_check.stdout"
        - package_version.stdout|int < pkg_version.stdout|int

    - name: "Set header"
      shell: echo 'Hostname,IP_Address,Distribution,Required_version,Installed_version,Comments' > "{{ filename }}"
      run_once: true
      delegate_to: localhost
    
    - name: "Write data to file same package version installed"
      shell: echo {{ ansible_hostname }},{{ ansible_default_ipv4.address }},{{ ansible_distribution }} {{ ansible_distribution_version }},{{ package_name }},{{ package_check.stdout }},'Same version installed' >> "{{ filename }}"
      delegate_to: localhost
      when:
        - "'not installed' not in package_check.stdout"
        - "package_version.stdout|int == pkg_version.stdout|int"

    - name: "Write data to file when package not installed"
      shell: echo {{ ansible_hostname }},{{ ansible_default_ipv4.address }},{{ ansible_distribution }} {{ ansible_distribution_version }},{{ package_name }},--,'Not Installed' >> "{{ filename }}"
      delegate_to: localhost
      when: "'not installed' in package_check.stdout"
  
    - name: "Write data to file when lower version installed"
      shell: echo {{ ansible_hostname }},{{ ansible_default_ipv4.address }},{{ ansible_distribution }} {{ ansible_distribution_version }},{{ package_name }},{{ package_check.stdout }},'Lower version installed' >> "{{ filename }}"
      delegate_to: localhost
      when:
        - "'not installed' not in package_check.stdout"
        - package_version.stdout|int > pkg_version.stdout|int

    - name: "Write data to file when higher version installed"
      shell: echo {{ ansible_hostname }},{{ ansible_default_ipv4.address }},{{ ansible_distribution }} {{ ansible_distribution_version }},{{ package_name }},{{ package_check.stdout }},'Higher version installed' >> "{{ filename }}"
      delegate_to: localhost
      when:
        - "'not installed' not in package_check.stdout"
        - package_version.stdout|int < pkg_version.stdout|int